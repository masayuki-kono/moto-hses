---
description: "Commit message rules. USE WHEN: writing commits, naming branches, or creating PRs."
globs: "**/*"
alwaysApply: true
---

# Commit Message Rules

## Language Requirement

- **All commit messages must be written in English**
- Ensure clarity for international contributors and reviewers
- Use concise and descriptive English that follows the _Conventional Commits_ specification

## Conventional Commit Format

### Basic Structure

```
type: description

Detailed changes (if necessary)

- Bullet points for specific changes
- Reference issues when applicable
```

### Commit Types

- `feat`: Introduce a new feature
- `fix`: Resolve a bug
- `refactor`: Code restructuring without changing behavior
- `docs`: Documentation-only changes
- `test`: Add or update tests
- `chore`: Maintenance tasks (dependencies, configs, etc.)
- `style`: Code style changes (formatting, naming, etc.)
- `perf`: Performance optimizations
- `ci`: CI/CD pipeline changes
- `build`: Build system or dependency changes

### Guidelines

- Keep the first line â‰¤ 50 characters (recommended max: 72 for body lines)
- Use **imperative mood** ("Add", not "Added" or "Adds")
- Start with lowercase after the type (e.g., `feat: add parser`)
- Do **not** end the subject line with a period
- Use body section for reasoning, context, or details
- Reference related issues or PRs when relevant
- Prefer `scope` for clarity in multi-module projects (e.g., `feat(protocol): add HSES parser`)

## Examples

### Good Examples

```
feat: add HSES protocol implementation

- Implement Command and VariableType traits
- Add basic enums (Division, Service, CoordinateSystem)
- Add Variable<T> struct for type-safe operations
- Add unit tests for core functionality
```

```
refactor: split lib.rs into multiple modules

- error.rs: error handling module
- types.rs: basic type definitions and traits
- position.rs: position data structures
- status.rs: status data structures
- message.rs: HSES message structures
- variables.rs: variable type implementations
- tests.rs: test code (separate module)

This refactoring significantly improves code maintainability,
readability, and modularity.
```

```
fix: resolve VariableType trait conflict

Remove duplicate implementation for Position type
in variables.rs to avoid compilation errors.
```

### Bad Examples

```
Added new feature
```

```
FIX: bug in protocol
```

```
refactor: split lib.rs into multiple module files for better maintainability and improved code organization with enhanced modularity
```

## Branch Naming Convention

- `feature/<short-description>`: New features
- `fix/<short-description>`: Bug fixes
- `refactor/<short-description>`: Code refactoring
- `docs/<short-description>`: Documentation updates
- `test/<short-description>`: Test-related changes
- `chore/<short-description>`: Maintenance or setup

> Use `-` instead of `_` for readability (e.g., `feature/add-hses-parser`).
