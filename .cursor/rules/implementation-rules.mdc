---
description: "Implementation rules for Moto-HSES Rust Client. USE WHEN: implementing features, running tests, or reviewing code."
globs: "**/*"
alwaysApply: true
---

# Moto-HSES Rust Client Library Development Rules

## Development Approach

This project implements features step by step, ensuring that unit tests pass at each stage of development.

## Basic Rules

### 1. Incremental Implementation Principle

- Run unit tests after each step completion and ensure all tests pass
- If tests fail, do not proceed to the next step until fixes are complete
- **CRITICAL**: Always run `cargo clippy --all-features --workspace` to resolve warnings
- **CRITICAL**: Always run `cargo fmt` to standardize code formatting

### 2. Specification Reference Priority

When there are unclear points, refer to specifications in the following order:

1. `docs/design/protocol-commands.md` - HSES Protocol Command Reference
2. `docs/design/architecture.md` - Architecture Design
3. `docs/specs/hses-protocol.md` - HSES Protocol Specification

### 3. Code Quality Rules

#### Type Conversion Safety

**CRITICAL**: Never use `unwrap_or(MAX_VALUE)` for type conversions.

```rust
let offset_value = i * 8 + bit;

// ❌ DANGEROUS - Silent failure with wrong value
let offset = u16::try_from(offset_value).unwrap_or(u16::MAX);

// ✅ SAFE - Explicit error handling
let offset = u16::try_from(offset_value)
    .map_err(|_| format!("I/O offset {offset_value} exceeds u16::MAX"))?;
```

**Reason**: Using `unwrap_or(MAX_VALUE)` can cause severe issues by silently mapping out-of-range values to maximum values, leading to incorrect calculations and potential system failures.

**Rule**: Always use proper error handling with `map_err` or explicit `match` statements for type conversions.

#### Format String Best Practices

**CRITICAL**: Always use inline format arguments in `format!` macro to avoid Clippy warnings.

```rust
// ❌ BAD - Causes clippy::uninlined_format_args warning
let message = format!("Error: {} occurred at line {}", error, line);

// ✅ GOOD - Use inline format arguments
let message = format!("Error: {error} occurred at line {line}");
```

**Reason**: Inline format arguments are more readable, performant, and avoid Clippy warnings.

**Rule**: Always use `{variable}` syntax instead of separate arguments in `format!` macro.

## Testing Strategy

### Unit Test Execution

```bash
# Protocol layer tests
cd moto-hses-proto && cargo test

# Client layer tests
cd moto-hses-client && cargo test

# Mock server tests
cd moto-hses-mock && cargo test
```

### Integration Test Execution

```bash
# Run protocol communication tests in moto-hses-mock
cargo test --test protocol_communication_tests

# Run comprehensive integration tests between moto-hses-client and moto-hses-mock
cargo test --test integration_tests
```

## Debugging and Troubleshooting

### Test Failure Response

1. Analyze failed test cases in detail
2. Verify consistency between implementation and specification
3. Apply fixes incrementally
4. Re-run all tests after fixes

### Logs

Integration test logs from `cargo test --test integration_tests` are output to:
```
moto-hses-client/logs/integration_tests.log
```

When analyzing communication errors between client and mock server, check the output logs to verify that sent and received data are consistent.
