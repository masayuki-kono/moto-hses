---
description: "Implementation rules for Moto-HSES Rust Client. USE WHEN: implementing features, running tests, or reviewing code."
globs: "**/*"
alwaysApply: true
---

# Moto-HSES Rust Client Library Development Rules

## Development Approach

This project follows the implementation guide (`docs/design/implementation-guide.md`) to implement features step by step, ensuring that unit tests pass at each stage of development.

## Basic Rules

### 1. Incremental Implementation Principle

- Implement from Phase 1 (Protocol Layer) following the implementation guide
- Run unit tests after each step completion and ensure all tests pass
- If tests fail, do not proceed to the next step until fixes are complete

### 2. Specification Reference Priority

When there are unclear points, refer to specifications in the following order:

1. `docs/design/implementation-guide.md` - Implementation Guide
2. `docs/design/client-api.md` - API Design Specification
3. `docs/design/architecture.md` - Architecture Design
4. `docs/specs/hses-protocol.md` - HSES Protocol Specification

### 3. Code Quality

- Follow Rust best practices
- Resolve `cargo clippy` warnings
- Use `cargo fmt` to standardize code formatting
- Implement appropriate error handling

## Testing Strategy

### Unit Test Execution

```bash
# Protocol layer tests
cd moto-hses-proto && cargo test

# Client layer tests
cd moto-hses-client && cargo test

# Mock server tests
cd moto-hses-mock && cargo test
```

### Integration Test Execution

```bash
# Run protocol communication tests in moto-hses-mock
cargo test --test protocol_communication_tests

# Run comprehensive integration tests between moto-hses-client and moto-hses-mock
cargo test --test integration_tests
```

### Test Quality Standards

- Test both normal and abnormal cases for each feature
- Test edge cases (boundary values, invalid data)

## Code Review Criteria

### Implementation Quality

- Does it conform to the implementation guide specifications?
- Is type safety ensured?
- Is error handling appropriate?
- Is performance considered?

### Test Quality

- Do all unit tests pass?
- Is test coverage sufficient?
- Are edge cases tested?

### Documentation Quality

- Are code comments appropriate?
- Is API documentation up to date?
- Is consistency maintained with the implementation guide?

## Debugging and Troubleshooting

### Common Issues

1. **Protocol Errors**: Verify consistency with HSES specification
2. **Type Errors**: Check `VariableType` trait implementation
3. **Serialization Errors**: Verify byte order and data structure
4. **Network Errors**: Check UDP communication settings and timeouts

### Debugging Tools

- Use `cargo test -- --nocapture` to check test output
- Use `println!` or `dbg!` macros to output debug information
- Use Wireshark to analyze network packets

## Emergency Response

### Inconsistency with Implementation Guide

1. Recheck the relevant section of the implementation guide
2. Refer to related specifications (client-api.md, architecture.md, hses-protocol.md)
3. Update implementation guide if necessary

### Test Failure Response

1. Analyze failed test cases in detail
2. Verify consistency between implementation and specification
3. Apply fixes incrementally
4. Re-run all tests after fixes
