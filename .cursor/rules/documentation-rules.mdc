# Documentation Rules

## Language Requirement

- **All documentation must be written in English**
- This ensures international collaboration and accessibility
- Use clear, concise English that is easy to understand
- Follow technical writing best practices

## Documentation Types

### Code Documentation

- **Code Comments**: Write in English
- **API Documentation**: Use Rust doc comments (`///` and `//!`)
- **README Files**: English only
- **Inline Comments**: English for complex logic explanations

### Project Documentation

- **Design Documents**: English (implementation-guide.md, architecture.md, etc.)
- **API Specifications**: English (client-api.md, etc.)
- **Protocol Specifications**: English (hses-protocol.md, etc.)
- **User Guides**: English
- **Developer Guides**: English

### Technical Writing Guidelines

- Use active voice when possible
- Keep sentences short and clear
- Use consistent terminology
- Include code examples where appropriate
- Use proper markdown formatting

## Documentation Structure

### README.md

````markdown
# Project Name

Brief description in English

## Features

- Feature 1
- Feature 2

## Installation

```bash
cargo install project-name
```
````

## Usage

Basic usage examples

## Documentation

Link to detailed documentation

## Contributing

Guidelines for contributors

````

### API Documentation

```rust
/// Brief description of the function
///
/// # Arguments
///
/// * `param1` - Description of parameter 1
/// * `param2` - Description of parameter 2
///
/// # Returns
///
/// Description of return value
///
/// # Examples
///
/// ```
/// use crate::module::function;
///
/// let result = function(param1, param2);
/// ```
pub fn function(param1: Type1, param2: Type2) -> ReturnType {
    // Implementation
}
````

## File Naming Convention

- Use English for all file names
- Use kebab-case for documentation files
- Use descriptive names that indicate content

### Examples

- `implementation-guide.md` ✅
- `client-api.md` ✅
- `architecture.md` ✅
- `実装ガイド.md` ❌
- `クライアントAPI.md` ❌

## Translation Guidelines

If documentation needs to be available in multiple languages:

1. **Primary Language**: English (source of truth)
2. **Secondary Languages**: Translated versions
3. **File Naming**: Use language suffixes (e.g., `README.ja.md`)
4. **Consistency**: Keep all language versions in sync

## Documentation Review

### Quality Checklist

- [ ] Written in clear English
- [ ] Grammar and spelling checked
- [ ] Technical accuracy verified
- [ ] Code examples tested
- [ ] Links are working
- [ ] Formatting is consistent
- [ ] Terminology is consistent

### Review Process

1. Self-review for language and technical accuracy
2. Peer review for clarity and completeness
3. Technical review for accuracy
4. Final review before publishing

## Examples

### Good Documentation

````markdown
# HSES Protocol Implementation

This library provides a type-safe implementation of the HSES (High Speed Ethernet Server) protocol for industrial robot communication.

## Features

- Type-safe command definitions
- Efficient batch operations
- Comprehensive error handling
- Mock server for testing

## Quick Start

```rust
use moto_hses_proto::{HsesClient, ReadStatus};

let client = HsesClient::new("192.168.1.100:10040")?;
let status = client.send_command(ReadStatus)?;
```
````

````

### Bad Documentation

```markdown
# HSESプロトコル実装

このライブラリは産業用ロボット通信のためのHSESプロトコルの型安全な実装を提供します。

## 機能

- 型安全なコマンド定義
- 効率的なバッチ操作
- 包括的なエラーハンドリング
- テスト用のモックサーバー
````

---

## rule_type: Always

description:
globs:
alwaysApply: true

---
