---
description: "Pre-push / PR checklist. Apply when committing, pushing, or creating a pull request."
globs: "**/*"
alwaysApply: true
---

# Pre-Push and Pull Request Rules

## Pre-Push Checklist

Before pushing code to any branch, especially before creating pull requests, ensure all local checks pass:

> **Note**: Execute checks in order for efficiency. Fast checks (formatting, clippy) run first, followed by slower checks (tests, docs, security).

### 1. Code Formatting

```bash
cargo fmt --all -- --check
```

- **Required**: All code must be properly formatted
- **Fix if needed**: `cargo fmt --all`

### 2. Static Analysis

```bash
cargo clippy --all-targets --all-features -- -D warnings
```

- **Required**: No Clippy warnings or errors
- **Fix if needed**: Address all warnings before pushing

### 3. Tests

```bash
cargo test --all-features --workspace
```

- **Required**: All tests must pass
- **Coverage**: Ensure new functionality has appropriate test coverage

### 4. Documentation Build

```bash
cargo doc --all-features --no-deps
```

- **Required**: Documentation must build without warnings
- **Fix if needed**: Address rustdoc warnings in code comments

### 5. Security Audit

```bash
cargo audit
```

- **Required**: No known security vulnerabilities
- **Action**: Update dependencies if vulnerabilities are found

### 6. Dependency Check

```bash
cargo outdated
```

- **Recommended**: Check for outdated dependencies
- **Action**: Update dependencies when safe to do so

## Pull Request Requirements

### Title Format

Follow conventional commit format:

```
type: brief description
```

Examples:

- `feat: implement comprehensive file operations`
- `fix: resolve file handling issues`
- `refactor: improve mock server architecture`

### Description Template

**REQUIRED**: Use the structured format defined in `.github/pull_request_template.md` for all pull requests.

When creating PRs, you MUST:
1. **Read the template**: Reference `.github/pull_request_template.md` content
2. **Follow the structure**: Use the template's sections (Overview, Major Changes, Technical Details, etc.)
3. **Fill all sections**: Complete each required section with relevant information
4. **Use emojis**: Include appropriate emojis (‚ú®, üîß, üêõ, üèóÔ∏è) for change types
5. **Reference issues**: Link related issues using "Closes #" format

**Template Structure**:
- Overview: Brief description of what the PR accomplishes
- Major Changes: Categorized list with emojis
- Technical Details: Implementation specifics
- Breaking Changes: List any breaking changes
- Related Issues: Link to issues using "Closes #"

**AVOID in PR descriptions**:
- ‚ùå **File Changes**: Do not include detailed file change lists
- ‚ùå **Code blocks with file paths**: Avoid `moto-hses-proto/src/` style listings
- ‚ùå **Command-like syntax**: Avoid text that could be interpreted as shell commands
- ‚ùå **Excessive technical details**: Keep descriptions concise and high-level
- ‚ùå **Raw git output**: Do not include git status or diff information

**Keep PR descriptions**:
- ‚úÖ **High-level overview**: Focus on what the PR accomplishes
- ‚úÖ **Business impact**: Explain why the changes matter
- ‚úÖ **User-facing changes**: Describe visible improvements
- ‚úÖ **Concise technical details**: Only essential implementation notes

### CLI PR Creation

When creating PRs via CLI, use the following command structure:

```bash
gh pr create --title "type: brief description" --body "PR description" --assignee @me
```

**Key points**:
- Use `--assignee @me` to automatically assign the PR to yourself
- This ensures proper ownership and review workflow
